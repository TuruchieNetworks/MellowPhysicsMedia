// Blue Skies
#ifdef GL_ES
precision mediump float;
#endif

#define MAX_STEPS 100
#define MAX_DIST 100.0
#define SURF_DIST 0.001
vec3 dgv;

// === Fractal Hill Pattern ===
float fractalHill(float t) {
  float total = 0.0;
  float amplitude = 1.0;
  float frequency = 1.0;
  float persistence = 0.5;

  for (int i = 0; i < 4; i++) {
    total += sin(t * frequency * 3.14159) * amplitude;
    amplitude *= persistence;
    frequency *= 2.0;
  }

  return total * 0.5 + 0.5; // normalize to [0,1]
}

// Terrain height using XZ
float terrainHeight(vec2 posXZ) {
  return fractalHill(posXZ.x * 0.5 + sin(posXZ.y) * 0.25);
}

// Usage
float getHeight(float t) {
  return fractalHill(t); // fractal height
}

float hash21(vec2 p) {
    p = fract(p * vec2(123.34, 456.21));
    p += dot(p, p + 78.233);
    return fract(p.x * p.y);
}

float ripple(float t) {
  return 0.5 + 0.5 * sin(t * 2.0 * 3.14159); // repeats every 1.0
}

float hillTerrain(float t) {
  return abs(sin(t * 2.0 * 3.14159)); // double bump per cycle
}

vec3 path (vec3 startPos, vec3 endPos, float t){
  return mix(startPos, endPos, hillTerrain(t)); // rises, then falls
}

float linearTerrainSDF(vec3 p) {
  // simulate terrain along X
  float h = fractalHill(p.x);
  return p.y - h; // above = positive, below = negative
}

// 3D terrain SDF
float terrainSDF(vec3 p) {
  float h = terrainHeight(p.xz);
  return p.y - h;
}

float terrainVolumeSDF(vec3 p) {
  float h = terrainHeight(p.xz); 
  return p.y - h;
}

float sdCylinder(vec3 p, float h, float r) {
    vec2 d = abs(vec2(length(p.xz), p.y)) - vec2(r, h * 0.5);
    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));
}

float treeSDF(vec3 p) {
    vec3 q = fract(p);
    float lt = linearTerrainSDF(p);
    // Distribute trees periodically over terrain
    vec2 cell = floor(p.xz * 2.0); // spacing
    vec3 localP = p - vec3(cell.x + 0.5, 0.0 , cell.y + 0.5);
    localP.y -= terrainHeight(cell + 0.5); // offset by terrain

    float trunk = sdCylinder(localP,  0.5, 0.05); // trunk
    return trunk;
}

float foliageSDF(vec3 p, vec3 base, float rnd) {
    float foliageHeight = 0.2 + 0.1 * fract(rnd * 60.0);
    vec3 canopyCenter = base + vec3(0.0, foliageHeight, 0.0);
    return length(p - canopyCenter) - 0.15; // sphere canopy
}

float sceneSDF(vec3 p) {
    vec3 q = fract(p);
    float terrain = terrainVolumeSDF(p);
    float tree = treeSDF(p);
    float foliage = min(foliageSDF(q, (log(q)), tree), tree);
    return min(min(terrain, tree), foliage);
}

// Estimate normal from SDF
vec3 computeNormal(vec3 p) {
  float d = terrainVolumeSDF(p);
  vec2 e = vec2(0.001, 0.0);
  return normalize(vec3(
    terrainVolumeSDF(p + e.xyy) - d,
    terrainVolumeSDF(p + e.yxy) - d,
    terrainVolumeSDF(p + e.yyx) - d
  ));
}

vec3 terrainColor(vec3 p, float d) {
  // Shading
  vec3 color = vec3(0.6, 0.85, 0.4); // default grass color
  if (d < MAX_DIST) {
    vec3 normal = computeNormal(p);
    float diff = clamp(dot(normal, vec3(0.3, 1.0, 0.5)), 0.0, 1.0);
    color = vec3(0.3, 0.6, 0.2) * diff;
  } else {
    color = vec3(0.6, 0.8, 1.0); // sky
  }
    return color;
}

float rayPower(vec3 p, float d, float t) {
  float depthFactor = 0.064;
  float ray = t * 0.2 * depthFactor;
  vec3 color;

  if (d < MAX_DIST) {
    vec3 normal = computeNormal(p);
    float diff = clamp(dot(normal, normalize(vec3(0.3, 1.0, 0.5))), 0.0, 1.0);
    color = vec3(0.3, 0.6, 0.2) * diff;

    float treeDist = treeSDF(p);
    if (treeDist < 0.02) {
      color = vec3(0.25, 0.1, 0.05);
    }

    float canopy = foliageSDF(p, vec3(0.0), hash21(p.xz));
    if (canopy < 0.03) {
      color = vec3(0.1, 0.4, 0.1);
    }

  } else {
    color = vec3(0.6, 0.8, 1.0); // base sky tint
  }

  return ray;
}

vec2 raymarch(vec3 ro, vec3 rd) {
  float t = 0.0; // Total Distance Travelled By Ray
  dgv = vec3(t);
  vec3 p; // declared outside loop so it's accessible after
  float d = 0.0;

  for (int i = 0; i < 80; i++) {
    p = ro + rd * t;
    d = min(terrainVolumeSDF(p), sceneSDF(p));
    if (d < 0.001 || t > 100.0) break;

    t += d;
    dgv = vec3(i) / 80.0;
  }
  float ray = rayPower(p, d, t);

  return vec2(t, ray);
}

vec4 borders(vec2 u) {
    return vec4(
        u.x,             // distance from left
        1.0 - u.x,       // distance from right
        u.y,             // distance from bottom
        1.0 - u.y        // distance from top
    );
}

vec4 deviceDepthPixelDimension(vec2 u) {
    vec2 p = vec2(0.5) - u;

    float r = length(p) * 2.0;
    float a = atan(p.y, p.x);
    float f = cos(a * 3.0);

    vec4 wall = borders(u);  // NEW: How close to left/right or top/bottom
    float depth = min(wall.x, wall.y);  // use closest edge

    return vec4(r, a, f, depth);  // now you have screen-depth too!
}

float computeGlowFactor(float s) {
	return s * 0.1;
}

void main(){
    vec2 u = gl_FragCoord.xy/resolution.xy;
    vec3 color = vec3(0.0);

    float glow = computeGlowFactor(3.67);
    vec4 device = deviceDepthPixelDimension(u);
    float d = device.w;
    float r = device.x;
    float a = device.y;
    float f = device.z;

    // Camera setup
  vec3 ro = vec3(0.0, 1.0, -3.5); // camera origin
  vec3 lookAt = vec3(0.0, 0.0, 0.0);
  vec3 forward = normalize(lookAt - ro);
  vec3 right = normalize(cross(vec3(0.0, 1.0, 0.0), forward));
  vec3 up = cross(forward, right);
  vec3 rd = normalize(u.x * right + u.y * up + 1.5 * forward);

  // March
  vec2 renderer = raymarch(ro, rd);
  float t = renderer.x;
  float ray = renderer.y;
  vec3 p = ro + rd * t+(time)*sin(d);
  vec3 terrain = terrainColor(p, t);//+dgv;
    
  color = vec3( 1.-smoothstep(f,f+0.02,r) );
  color = vec3(terrain.x, (terrain.y*terrain.x), terrain.z+r/time)/r*(glow);

  gl_FragColor = vec4(color, 1.0);
}







// Purple Sky
#ifdef GL_ES
precision mediump float;
#endif

#define MAX_STEPS 100
#define MAX_DIST 100.0
#define SURF_DIST 0.001
vec3 dgv;

// === Fractal Hill Pattern ===
float fractalHill(float t) {
  float total = 0.0;
  float amplitude = 1.0;
  float frequency = 1.0;
  float persistence = 0.5;

  for (int i = 0; i < 4; i++) {
    total += sin(t * frequency * 3.14159) * amplitude;
    amplitude *= persistence;
    frequency *= 2.0;
  }

  return total * 0.5 + 0.5; // normalize to [0,1]
}

// Terrain height using XZ
float terrainHeight(vec2 posXZ) {
  return fractalHill(posXZ.x * 0.5 + sin(posXZ.y) * 0.25);
}

// Usage
float getHeight(float t) {
  return fractalHill(t); // fractal height
}

float sdBox( vec3 p, vec3 b ){
  vec3 q = abs(p) - b;
  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);
}

float ripple(float t) {
  return 0.5 + 0.5 * sin(t * 2.0 * 3.14159); // repeats every 1.0
}

float hillTerrain(float t) {
  return abs(sin(t * 2.0 * 3.14159)); // double bump per cycle
}

vec3 path (vec3 startPos, vec3 endPos, float t){
  return mix(startPos, endPos, hillTerrain(t)); // rises, then falls
}

float linearTerrainSDF(vec3 p) {
  // simulate terrain along X
  float h = fractalHill(p.x);
  return p.y - h; // above = positive, below = negative
}

// 3D terrain SDF
float terrainSDF(vec3 p) {
  float h = terrainHeight(p.xz);
  return p.y - h;
}

float terrainVolumeSDF(vec3 p) {
  float h = terrainHeight(p.xz); // 2D hill over XZ
  return p.y - h;
}

float sdCylinder(vec3 p, float h, float r) {
    vec2 d = abs(vec2(length(p.xz), p.y)) - vec2(r, h * 0.5);
    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));
}

float treeSDF(vec3 p) {
    // Distribute trees periodically over terrain
    vec2 cell = floor(p.xz * 2.0); // spacing
    vec3 localP = p - vec3(cell.x + 0.5, 0.0 , cell.y + 0.5);
    localP.y -= terrainHeight(cell + 0.5); // offset by terrain

    float trunk = sdCylinder(localP,  0.5, 0.05); // trunk
    return trunk;
}

float foliageSDF(vec3 p, vec3 base, float rnd) {
    float foliageHeight = 0.2 + 0.1 * fract(rnd * 60.0);
    vec3 canopyCenter = base + vec3(0.0, foliageHeight, 0.0);
    // vec3 q = fract(p)-0.5;
    return length(p - canopyCenter) - 0.15; // sphere canopy
}

float sceneSDF(vec3 p) {
    vec3 q = fract(p);
    float terrain = terrainVolumeSDF(p);
    float tree = treeSDF(p);
    float foliage = min(foliageSDF(q, (log(q)), tree), tree);
    return min(min(terrain, tree), foliage);
}

// Estimate normal from SDF
vec3 computeNormal(vec3 p) {
  float d = terrainVolumeSDF(p);
  vec2 e = vec2(0.001, 0.0);
  return normalize(vec3(
    terrainVolumeSDF(p + e.xyy) - d,
    terrainVolumeSDF(p + e.yxy) - d,
    terrainVolumeSDF(p + e.yyx) - d
  ));
}

vec3 terrainColor(vec3 p, float d) {
  vec3 color;

  if (d < MAX_DIST) {
    vec3 normal = computeNormal(p);
    float diff = clamp(dot(normal, normalize(vec3(0.3, 1.0, 0.5))), 0.0, 1.0);
    color = vec3(0.3, 0.6, 0.2) * diff;

    if (treeSDF(p) < 0.02) {
      color = vec3(0.25, 0.1, 0.05); // trunk
    }

    if (foliageSDF(p, vec3(0.0), hash21(p.xz)) < 0.03) {
      color = vec3(0.1, 0.4, 0.1); // canopy
    }

  } else {
    color = vec3(0.6, 0.8, 1.0); // sky

  }

  return color;
}

float rayPower(vec3 p, float d, float t) {
  float depthFactor = 0.064;
  float ray = t * 0.2 * depthFactor;
  vec3 color;

  if (d < MAX_DIST) {
    vec3 normal = computeNormal(p);
    float diff = clamp(dot(normal, normalize(vec3(0.3, 1.0, 0.5))), 0.0, 1.0);
    color = vec3(0.3, 0.6, 0.2) * diff;

    float treeDist = treeSDF(p);
    if (treeDist < 0.02) {
      color = vec3(0.25, 0.1, 0.05);
    }

    float canopy = foliageSDF(p, vec3(0.0), hash21(p.xz));
    if (canopy < 0.03) {
      color = vec3(0.1, 0.4, 0.1);
    }

  } else {
    color = vec3(0.6, 0.8, 1.0); // base sky tint
  }

  return ray;
}

vec2 raymarch(vec3 ro, vec3 rd) {
  float t = 0.0; // Total Distance Travelled By Ray
  dgv = vec3(t);
  vec3 p; // declared outside loop so it's accessible after
  float d = 0.0;

  for (int i = 0; i < 80; i++) {
    p = ro + rd * t;
    d = min(terrainVolumeSDF(p), sceneSDF(p));
    if (d < 0.001 || t > 100.0) break;

    t += d;
    dgv = vec3(i) / 80.0;
  }
  float ray = rayPower(p, d, t);

  return vec2(t, ray);
}

vec4 borders(vec2 u) {
    return vec4(
        u.x,             // distance from left
        1.0 - u.x,       // distance from right
        u.y,             // distance from bottom
        1.0 - u.y        // distance from top
    );
}

vec4 deviceDepthPixelDimension(vec2 u) {
    vec2 p = vec2(0.5) - u;

    float r = length(p) * 2.0;
    float a = atan(p.y, p.x);
    float f = cos(a * 3.0);

    vec4 wall = borders(u);  // NEW: How close to left/right or top/bottom
    float depth = min(wall.x, wall.y);  // use closest edge

    return vec4(r, a, f, depth);  // now you have screen-depth too!
}

float computeGlowFactor(float s) {
	return s * 0.1;
}


void main(){
    vec2 u = gl_FragCoord.xy/resolution.xy;
    vec3 color = vec3(0.0);

    float glow = computeGlowFactor(3.67);
    vec4 device = deviceDepthPixelDimension(u);
    float d = device.w;
    float r = device.x;
    float a = device.y;
    float f = device.z;

    // Camera setup
  vec3 ro = vec3(0.0, 1.0, -3.5); // camera origin
  vec3 lookAt = vec3(0.0, 0.0, 0.0);
  vec3 forward = normalize(lookAt - ro);
  vec3 right = normalize(cross(vec3(0.0, 1.0, 0.0), forward));
  vec3 up = cross(forward, right);
  vec3 rd = normalize(u.x * right + u.y * up + 1.5 * forward);

  // March
  vec2 renderer = raymarch(ro, rd);
  float t = renderer.x;
  float ray = renderer.y;
  vec3 p = ro + rd * t+(time*0.1);
  vec3 terrain = terrainColor(p, t);//+dgv;


  color = vec3( 1.-smoothstep(f,f+0.02,r) );
  color = vec3(terrain.x, (terrain.y*terrain.x), terrain.z+r/time)/r*(glow);

  gl_FragColor = vec4(color, 1.0);
}



// Mystic Cave

#ifdef GL_ES
precision mediump float;
#endif

#define MAX_STEPS 100
#define MAX_DIST 100.0
#define SURF_DIST 0.001
vec3 dgv;

float hash21(vec2 p) {
    p = fract(p * vec2(123.34, 456.21));
    p += dot(p, p + 78.233);
    return fract(p.x * p.y);
}
// === Fractal Hill Pattern ===
float fractalHill(float t) {
  float total = 0.0;
  float amplitude = 1.0;
  float frequency = 1.0;
  float persistence = 0.5;

  for (int i = 0; i < 4; i++) {
    total += sin(t * frequency * 3.14159) * amplitude;
    amplitude *= persistence;
    frequency *= 2.0;
  }

  return total * 0.5 + 0.5; // normalize to [0,1]
}

// Terrain height using XZ
float terrainHeight(vec2 posXZ) {
  return fractalHill(posXZ.x * 0.5 + sin(posXZ.y) * 0.25);
}

// Usage
float getHeight(float t) {
  return fractalHill(t); // fractal height
}

float sdBox( vec3 p, vec3 b ){
  vec3 q = abs(p) - b;
  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);
}

float ripple(float t) {
  return 0.5 + 0.5 * sin(t * 2.0 * 3.14159); // repeats every 1.0
}

float hillTerrain(float t) {
  return abs(sin(t * 2.0 * 3.14159)); // double bump per cycle
}

vec3 path (vec3 startPos, vec3 endPos, float t){
  return mix(startPos, endPos, hillTerrain(t)); // rises, then falls
}

float linearTerrainSDF(vec3 p) {
  // simulate terrain along X
  float h = fractalHill(p.x);
  return p.y - h; // above = positive, below = negative
}

// 3D terrain SDF
float terrainSDF(vec3 p) {
  float h = terrainHeight(p.xz);
  return p.y - h;
}

float terrainVolumeSDF(vec3 p) {
  float h = terrainHeight(p.xz); // 2D hill over XZ
  return p.y - h;
}

float sdCylinder(vec3 p, float h, float r) {
    vec2 d = abs(vec2(length(p.xz), p.y)) - vec2(r, h * 0.5);
    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));
}

float treeSDF(vec3 p) {
    // Distribute trees periodically over terrain
    vec2 cell = floor(p.xz * 2.0); // spacing
    vec3 localP = p - vec3(cell.x + 0.5, 0.0 , cell.y + 0.5);
    localP.y -= terrainHeight(cell + 0.5); // offset by terrain

    float trunk = sdCylinder(localP,  0.5, 0.05); // trunk
    return trunk;
}

float foliageSDF(vec3 p, vec3 base, float rnd) {
    float foliageHeight = 0.2 + 0.1 * fract(rnd * 60.0);
    vec3 canopyCenter = base + vec3(0.0, foliageHeight, 0.0);
    // vec3 q = fract(p)-0.5;
    return length(p - canopyCenter) - 0.15; // sphere canopy
}

float sceneSDF(vec3 p) {
    vec3 q = fract(p);
    float terrain = terrainVolumeSDF(p);
    float tree = treeSDF(p);
    float foliage = min(foliageSDF(q, (log(q)), tree), tree);
    return min(min(terrain, tree), foliage);
}

// Estimate normal from SDF
vec3 computeNormal(vec3 p) {
  float d = terrainVolumeSDF(p);
  vec2 e = vec2(0.001, 0.0);
  return normalize(vec3(
    terrainVolumeSDF(p + e.xyy) - d,
    terrainVolumeSDF(p + e.yxy) - d,
    terrainVolumeSDF(p + e.yyx) - d
  ));
}

vec3 terrainColor(vec3 p, float d) {
  vec3 color;

  if (d < MAX_DIST) {
    vec3 normal = computeNormal(p);
    float diff = clamp(dot(normal, normalize(vec3(0.3, 1.0, 0.5))), 0.0, 1.0);
    color = vec3(0.3, 0.6, 0.2) * diff;

    if (treeSDF(p) < 0.02) {
      color = vec3(0.25, 0.1, 0.05); // trunk
    }

    if (foliageSDF(p, vec3(0.0), hash21(p.xz)) < 0.03) {
      color = vec3(0.1, 0.4, 0.1); // canopy
    }

  } else {
    color = vec3(0.6, 0.8, 1.0); // sky

  }

  return color;
}

float rayPower(vec3 p, float d, float t) {
  float depthFactor = 0.064;
  float ray = t * 0.2 * depthFactor;
  vec3 color;

  if (d < MAX_DIST) {
    vec3 normal = computeNormal(p);
    float diff = clamp(dot(normal, normalize(vec3(0.3, 1.0, 0.5))), 0.0, 1.0);
    color = vec3(0.3, 0.6, 0.2) * diff;

    float treeDist = treeSDF(p);
    if (treeDist < 0.02) {
      color = vec3(0.25, 0.1, 0.05);
    }

    float canopy = foliageSDF(p, vec3(0.0), hash21(p.xz));
    if (canopy < 0.03) {
      color = vec3(0.1, 0.4, 0.1);
    }

  } else {
    color = vec3(0.6, 0.8, 1.0); // base sky tint
  }

  return ray;
}

vec2 raymarch(vec3 ro, vec3 rd) {
  float t = 0.0; // Total Distance Travelled By Ray
  dgv = vec3(t);
  vec3 p; // declared outside loop so it's accessible after
  float d = 0.0;

  for (int i = 0; i < 80; i++) {
    p = ro + rd * t;
    d = min(terrainVolumeSDF(p), sceneSDF(p));
    if (d < 0.001 || t > 100.0) break;

    t += d;
    dgv = vec3(i) / 80.0;
  }
  float ray = rayPower(p, d, t);

  return vec2(t, ray);
}

vec4 borders(vec2 u) {
    return vec4(
        u.x,             // distance from left
        1.0 - u.x,       // distance from right
        u.y,             // distance from bottom
        1.0 - u.y        // distance from top
    );
}

vec4 deviceDepthPixelDimension(vec2 u) {
    vec2 p = vec2(0.5) - u;

    float r = length(p) * 2.0;
    float a = atan((p.y), sin(p.x*2.))*sin(1.9*r);
    a = atan((p.y)*12.+p.y*time, sin(p.x*2.))*sin(.9*r); // circle ring
    float f = cos(a*3.0+time);

    // f = abs(cos(a*3.));
    // f = abs(cos(a*2.5))*.5+.3;
    // f = abs(cos(a*12.)*sin(a*3.))*.8+.1;
    // f = smoothstep(-.5,1., cos(a*10.))*0.2+0.5;
    // float shape = 1.-smoothstep(f,f+0.02,r);

    vec4 wall = borders(u);  // NEW: How close to left/right or top/bottom
    float depth = min(wall.x, wall.y);  // use closest edge

    return vec4(r, a, f, depth);  // now you have screen-depth too!
}

float computeGlowFactor(float s) {
	return s * 0.1;
}


void main(){
    vec2 u = gl_FragCoord.xy/resolution.xy;
    vec3 color = vec3(0.0);

    float glow = computeGlowFactor(4.67);
    vec4 device = deviceDepthPixelDimension(u);
    float d = device.w;
    float r = device.x;
    float a = device.y;
    float f = device.z;

    // Camera setup
  vec3 ro = vec3(0.0, 1.0, -3.5); // camera origin
  vec3 lookAt = vec3(0.0, 0.0, 0.0);
  vec3 forward = normalize(lookAt - ro);
  vec3 right = normalize(cross(vec3(0.0, 1.0, 0.0), forward));
  vec3 up = cross(forward, right);
  vec3 rd = normalize(u.x * right + u.y * up + 1.5 * forward);

  // March
  vec2 renderer = raymarch(ro, rd);
  float t = renderer.x;
  float ray = renderer.y;
  vec3 p = ro*a + rd * t+(time*0.1);
  vec3 terrain = terrainColor(p, t);//+dgv;

    color = vec3(terrain.x/a/r, (terrain.y*terrain.x-r), terrain.z+r/time)/r*(glow);

    gl_FragColor = vec4(color, 1.0);
}





#ifdef GL_ES
precision mediump float;
#endif

uniform vec2 resolution;
uniform vec2 u_mouse;
uniform float u_time;

#define MAX_STEPS 100
#define MAX_DIST 100.0
#define SURF_DIST 0.001
vec3 dgv;
float time = u_time;

float hash21(vec2 p) {
    p = fract(p * vec2(123.34, 456.21));
    p += dot(p, p + 78.233);
    return fract(p.x * p.y);
}
// === Fractal Hill Pattern ===
float fractalHill(float t) {
  float total = 0.0;
  float amplitude = 1.0;
  float frequency = 1.0;
  float persistence = 0.5;

  for (int i = 0; i < 4; i++) {
    total += sin(t * frequency * 3.14159) * amplitude;
    amplitude *= persistence;
    frequency *= 2.0;
  }

  return total * 0.5 + 0.5; // normalize to [0,1]
}

// Terrain height using XZ
float terrainHeight(vec2 posXZ) {
  return fractalHill(posXZ.x * 0.5 + sin(posXZ.y) * 0.25);
}

// Usage
float getHeight(float t) {
  return fractalHill(t); // fractal height
}

float sdBox( vec3 p, vec3 b ){
  vec3 q = abs(p) - b;
  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);
}

float ripple(float t) {
  return 0.5 + 0.5 * sin(t * 2.0 * 3.14159); // repeats every 1.0
}

float hillTerrain(float t) {
  return abs(sin(t * 2.0 * 3.14159)); // double bump per cycle
}

vec3 path (vec3 startPos, vec3 endPos, float t){
  return mix(startPos, endPos, hillTerrain(t)); // rises, then falls
}

float linearTerrainSDF(vec3 p) {
  // simulate terrain along X
  float h = fractalHill(p.x);
  return p.y - h; // above = positive, below = negative
}

// 3D terrain SDF
float terrainSDF(vec3 p) {
  float h = terrainHeight(p.xz);
  return p.y - h;
}

float terrainVolumeSDF(vec3 p) {
  float h = terrainHeight(p.xz); // 2D hill over XZ
  return p.y - h;
}

float sdCylinder(vec3 p, float h, float r) {
    vec2 d = abs(vec2(length(p.xz), p.y)) - vec2(r, h * 0.5);
    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));
}

float treeSDF(vec3 p) {
    // Distribute trees periodically over terrain
    vec2 cell = floor(p.xz * 2.0); // spacing
    vec3 localP = p - vec3(cell.x + 0.5, 0.0 , cell.y + 0.5);
    localP.y -= terrainHeight(cell + 0.5); // offset by terrain

    float trunk = sdCylinder(localP,  0.5, 0.05); // trunk
    return trunk;
}

float foliageSDF(vec3 p, vec3 base, float rnd) {
    float foliageHeight = 0.2 + 0.1 * fract(rnd * 60.0);
    vec3 canopyCenter = base + vec3(0.0, foliageHeight, 0.0);
    // vec3 q = fract(p)-0.5;
    return length(p - canopyCenter) - 0.15; // sphere canopy
}

float sceneSDF(vec3 p) {
    vec3 q = fract(p);
    float terrain = terrainVolumeSDF(p);
    float tree = treeSDF(p);
    float foliage = min(foliageSDF(q, (log(q)), tree), tree);
    return min(min(terrain, tree), foliage);
}

// Estimate normal from SDF
vec3 computeNormal(vec3 p) {
  float d = terrainVolumeSDF(p);
  vec2 e = vec2(0.001, 0.0);
  return normalize(vec3(
    terrainVolumeSDF(p + e.xyy) - d,
    terrainVolumeSDF(p + e.yxy) - d,
    terrainVolumeSDF(p + e.yyx) - d
  ));
}

// vec3 terrainColor(vec3 p, float d) {
//   // Shading
//   vec3 color = vec3(0.6, 0.85, 0.4); // default grass color
//   if (d < MAX_DIST) {
//     vec3 normal = computeNormal(p);
//     float diff = clamp(dot(normal, vec3(0.3, 1.0, 0.5)), 0.0, 1.0);
//     color = vec3(0.3, 0.6, 0.2) * diff;
//   } else {
//     color = vec3(0.6, 0.8, 1.0); // sky
//   }
//     return color;
// }

vec3 terrainColor(vec3 p, float d) {
  vec3 color;

  if (d < MAX_DIST) {
    vec3 normal = computeNormal(p);
    float diff = clamp(dot(normal, normalize(vec3(0.3, 1.0, 0.5))), 0.0, 1.0);
    color = vec3(0.3, 0.6, 0.2) * diff;

    if (treeSDF(p) < 0.02) {
      color = vec3(0.25, 0.1, 0.05); // trunk
    }

    if (foliageSDF(p, vec3(0.0), hash21(p.xz)) < 0.03) {
      color = vec3(0.1, 0.4, 0.1); // canopy
    }

  } else {
    color = vec3(0.6, 0.8, 1.0); // sky

  }

  return color;
}

float rayPower(vec3 p, float d, float t) {
  float depthFactor = 0.064;
  float ray = t * 0.2 * depthFactor;
  vec3 color;

  if (d < MAX_DIST) {
    vec3 normal = computeNormal(p);
    float diff = clamp(dot(normal, normalize(vec3(0.3, 1.0, 0.5))), 0.0, 1.0);
    color = vec3(0.3, 0.6, 0.2) * diff;

    float treeDist = treeSDF(p);
    if (treeDist < 0.02) {
      color = vec3(0.25, 0.1, 0.05);
    }

    float canopy = foliageSDF(p, vec3(0.0), hash21(p.xz));
    if (canopy < 0.03) {
      color = vec3(0.1, 0.4, 0.1);
    }

  } else {
    color = vec3(0.6, 0.8, 1.0); // base sky tint
  }

  return ray;
}

vec2 raymarch(vec3 ro, vec3 rd) {
  float t = 0.0; // Total Distance Travelled By Ray
  dgv = vec3(t);
  vec3 p; // declared outside loop so it's accessible after
  float d = 0.0;

  for (int i = 0; i < 80; i++) {
    p = ro + rd * t;
    d = min(terrainVolumeSDF(p), sceneSDF(p));
    if (d < 0.001 || t > 100.0) break;

    t += d;
    dgv = vec3(i) / 80.0;
  }
  float ray = rayPower(p, d, t);

  return vec2(t, ray);
}

vec4 borders(vec2 u) {
    return vec4(
        u.x,             // distance from left
        1.0 - u.x,       // distance from right
        u.y,             // distance from bottom
        1.0 - u.y        // distance from top
    );
}

vec4 deviceDepthPixelDimension(vec2 u) {
    vec2 p = vec2(0.5) - u;

    float r = length(p) * 2.0;
    float a = atan((p.y), sin(p.x));
    a atan((p.y), sin(p.x))*sin(.3*r);
    // a = atan((p.y)*12.+p.y*time, sin(p.x*2.))*sin(.9*r);//
    // a = atan((12.+p.y+time), sin(p.x*2.))*sin(.9*r); // Purple Mist
    // a = atan((12.+p.y*time), sin(p.x*2.))*sin(.9*r);
    // a = atan((p.y), sin(p.x*2.))*sin(.9*r); // Bloody Mist
    // a = atan((p.y), sin(p.x*2.))*sin(.9*r); 
    float f = cos(a*3.0+time);

    // f = abs(cos(a*3.));
    // f = abs(cos(a*2.5))*.5+.3;
    // f = abs(cos(a*12.)*sin(a*3.))*.8+.1;
    // f = smoothstep(-.5,1., cos(a*10.))*0.2+0.5;
    // float shape = 1.-smoothstep(f,f+0.02,r);

    vec4 wall = borders(u);  // NEW: How close to left/right or top/bottom
    float depth = min(wall.x, wall.y);  // use closest edge

    return vec4(r, a, f, depth);  // now you have screen-depth too!
}

float computeGlowFactor(float s) {
	return s * 0.1;
}


void main(){
    vec2 u = gl_FragCoord.xy/resolution.xy;
    vec3 color = vec3(0.0);

    float glow = computeGlowFactor(4.67);
    vec4 device = deviceDepthPixelDimension(u);
    float d = device.w;
    float r = device.x;
    float a = device.y;
    float f = device.z;

    // Camera setup
  vec3 ro = vec3(0.0, 1.0, -3.5); // camera origin
  vec3 lookAt = vec3(0.0, 0.0, 0.0);
  vec3 forward = normalize(lookAt - ro);
  vec3 right = normalize(cross(vec3(0.0, 1.0, 0.0), forward));
  vec3 up = cross(forward, right);
  vec3 rd = normalize(u.x * right + u.y * up + 1.5 * forward);

  // March
  vec2 renderer = raymarch(ro, rd);
  float t = renderer.x;
  float ray = renderer.y;
  vec3 p = ro*a + rd * t+(time*0.1);
  vec3 terrain = terrainColor(p, t);//+dgv;

    color = vec3(terrain.x/a, (terrain.y*terrain.x-r), terrain.z+r/time)/r*(glow);

    gl_FragColor = vec4(color, 1.0);
}




//// Blue Curtain
#ifdef GL_ES
precision mediump float;
#endif


#define MAX_STEPS 100
#define MAX_DIST 100.0
#define SURF_DIST 0.001
vec3 dgv;

float hash21(vec2 p) {
    p = fract(p * vec2(123.34, 456.21));
    p += dot(p, p + 78.233);
    return fract(p.x * p.y);
}
// === Fractal Hill Pattern ===
float fractalHill(float t) {
  float total = 0.0;
  float amplitude = 1.0;
  float frequency = 1.0;
  float persistence = 0.5;

  for (int i = 0; i < 4; i++) {
    total += sin(t * frequency * 3.14159) * amplitude;
    amplitude *= persistence;
    frequency *= 2.0;
  }

  return total * 0.5 + 0.5; // normalize to [0,1]
}

// Terrain height using XZ
float terrainHeight(vec2 posXZ) {
  return fractalHill(posXZ.x * 0.5 + sin(posXZ.y) * 0.25);
}

// Usage
float getHeight(float t) {
  return fractalHill(t); // fractal height
}

float sdBox( vec3 p, vec3 b ){
  vec3 q = abs(p) - b;
  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);
}

float ripple(float t) {
  return 0.5 + 0.5 * sin(t * 2.0 * 3.14159); // repeats every 1.0
}

float hillTerrain(float t) {
  return abs(sin(t * 2.0 * 3.14159)); // double bump per cycle
}

vec3 path (vec3 startPos, vec3 endPos, float t){
  return mix(startPos, endPos, hillTerrain(t)); // rises, then falls
}

float linearTerrainSDF(vec3 p) {
  // simulate terrain along X
  float h = fractalHill(p.x);
  return p.y - h; // above = positive, below = negative
}

// 3D terrain SDF
float terrainSDF(vec3 p) {
  float h = terrainHeight(p.xz);
  return p.y - h;
}

float terrainVolumeSDF(vec3 p) {
  float h = terrainHeight(p.xz); // 2D hill over XZ
  return p.y - h;
}

float sdCylinder(vec3 p, float h, float r) {
    vec2 d = abs(vec2(length(p.xz), p.y)) - vec2(r, h * 0.5);
    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));
}

float treeSDF(vec3 p) {
    // Distribute trees periodically over terrain
    vec2 cell = floor(p.xz * 2.0); // spacing
    vec3 localP = p - vec3(cell.x + 0.5, 0.0 , cell.y + 0.5);
    localP.y -= terrainHeight(cell + 0.5); // offset by terrain

    float trunk = sdCylinder(localP,  0.5, 0.05); // trunk
    return trunk;
}

float foliageSDF(vec3 p, vec3 base, float rnd) {
    float foliageHeight = 0.2 + 0.1 * fract(rnd * 60.0);
    vec3 canopyCenter = base + vec3(0.0, foliageHeight, 0.0);
    // vec3 q = fract(p)-0.5;
    return length(p - canopyCenter) - 0.15; // sphere canopy
}

float sceneSDF(vec3 p) {
    vec3 q = fract(p);
    float terrain = terrainVolumeSDF(p);
    float tree = treeSDF(p);
    float foliage = min(foliageSDF(q, (log(q)), tree), tree);
    return min(min(terrain, tree), foliage);
}

// Estimate normal from SDF
vec3 computeNormal(vec3 p) {
  float d = terrainVolumeSDF(p);
  vec2 e = vec2(0.001, 0.0);
  return normalize(vec3(
    terrainVolumeSDF(p + e.xyy) - d,
    terrainVolumeSDF(p + e.yxy) - d,
    terrainVolumeSDF(p + e.yyx) - d
  ));
}

vec3 terrainColor(vec3 p, float d) {
  vec3 color;

  if (d < MAX_DIST) {
    vec3 normal = computeNormal(p);
    float diff = clamp(dot(normal, normalize(vec3(0.3, 1.0, 0.5))), 0.0, 1.0);
    color = vec3(0.3, 0.6, 0.2) * diff;

    if (treeSDF(p) < 0.02) {
      color = vec3(0.25, 0.1, 0.05); // trunk
    }

    if (foliageSDF(p, vec3(0.0), hash21(p.xz)) < 0.03) {
      color = vec3(0.1, 0.4, 0.1); // canopy
    }

  } else {
    color = vec3(0.6, 0.8, 1.0); // sky

  }

  return color;
}

float rayPower(vec3 p, float d, float t) {
  float depthFactor = 0.064;
  float ray = t * 0.2 * depthFactor;
  vec3 color;

  if (d < MAX_DIST) {
    vec3 normal = computeNormal(p);
    float diff = clamp(dot(normal, normalize(vec3(0.3, 1.0, 0.5))), 0.0, 1.0);
    color = vec3(0.3, 0.6, 0.2) * diff;

    float treeDist = treeSDF(p);
    if (treeDist < 0.02) {
      color = vec3(0.25, 0.1, 0.05);
    }

    float canopy = foliageSDF(p, vec3(0.0),   hash21(p.xz));
    if (canopy < 0.03) {
      color = vec3(0.1, 0.4, 0.1);
    }

  } else {
    color = vec3(0.6, 0.8, 1.0); // base sky tint
  }

  return ray;
}

vec2 raymarch(vec3 ro, vec3 rd) {
  float t = 0.0; // Total Distance Travelled By Ray
  dgv = vec3(t);
  vec3 p; // declared outside loop so it's accessible after
  float d = 0.0;

  for (int i = 0; i < 80; i++) {
    p = ro + rd * t;
    d = min(terrainVolumeSDF(p), sceneSDF(p));
      d = sceneSDF(p);
    if (d < 0.001 || t > 100.0) break;

    t += d;
    dgv = vec3(i) / 80.0;
  }
  float ray = rayPower(p, d, t);
  dgv = terrainColor(p, d);
  return vec2(t, ray);
}

vec4 borders(vec2 u) {
    return vec4(
        u.x,             // distance from left
        1.0 - u.x,       // distance from right
        u.y,             // distance from bottom
        1.0 - u.y        // distance from top
    );
}

vec4 deviceDepthPixelDimension(vec2 u) {
    vec2 p = vec2(0.5) - u;

    float r = length(p) * 2.0;
    float a = atan((p.y), sin(p.x))*sin(.3*r);
    float f = cos(a*3.0+time);

    // f = abs(cos(a*3.));
    // f = abs(cos(a*2.5))*.5+.3;
    // f = abs(cos(a*12.)*sin(a*3.))*.8+.1;
    // f = smoothstep(-.5,1., cos(a*10.))*0.2+0.5;
    // float shape = 1.-smoothstep(f,f+0.02,r);

    vec4 wall = borders(u);  // NEW: How close to left/right or top/bottom
    float depth = min(wall.x, wall.y);  // use closest edge

    return vec4(r, a, f, depth);  // now you have screen-depth too!
}

float computeGlowFactor(float s) {
	return s * 0.1;
}


void main(){
  vec2 u = gl_FragCoord.xy/resolution.xy;

  float glow = computeGlowFactor(4.67);
  vec4 device = deviceDepthPixelDimension(u);
  float d = device.w;
  float r = device.x;
  float a = device.y;
  float f = device.z;

    // Camera setup
  vec3 ro = vec3(0.0, 1.0, -3.5); // camera origin
  vec3 lookAt = vec3(0.0, 0.0, 0.0);
  vec3 forward = normalize(lookAt - ro);
  vec3 right = normalize(cross(vec3(0.0, 1.0, 0.0), forward));
  vec3 up = cross(forward, right);
  vec3 rd = normalize(u.x * right + u.y * up + 1.5 * forward);

  // March
  vec2 renderer = raymarch(ro, rd);
  float t = renderer.x;
  float ray = renderer.y;
  vec3 p = ro*a + rd * t+(time*0.1);
  vec3 terrain = terrainColor(p, t);

    color = vec3(terrain.x/a, (terrain.y*terrain.x-r), terrain.z+r/time)/r*(glow) + dgv*ray;

    gl_FragColor = vec4(color, 1.0);
}

// moveToward(vec3 a, vec3 b, vec3 speed, float dt) {
//   v = b-a;
//   stepDist = speed*dt;
//   if(stepDist >=abs(v)) {
//     return b; // prevents overshooot
//   }
//   else{
//     return a+ sign(v)*stepDist
//   }
// }
vec3 moveToward(vec3 a, vec3 b, float speed, float dt) {
    vec3 dir = b - a;
    float dist = length(dir);
    float step = speed * dt;

    if (step >= dist) {
        return b; // Prevent overshoot
    }

    return a + normalize(dir) * step;
}

vec3 lerp(vec3 a, vec3 b, float t) {
    return a + (b - a) * t;
}
