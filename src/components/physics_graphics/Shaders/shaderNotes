
  useWiredCityTerrainSDFShader() {
    this.wiredCityTerrainSDFShader = {
      uniforms: {
        resolution: { value: new THREE.Vector2(this.width, this.height) },
        time: { value: this.time },
        hovered: { value: this.hovered },
        shapeFactor: { value: this.shapeFactor },
        explodeIntensity: { value: this.explodeIntensity },
        mousePosition: { value: new THREE.Vector2(0.0, 0.0) },
      },

      vertexShader: `
        uniform float time;
        uniform float hovered;
        uniform vec2 mousePosition;
        uniform float explodeIntensity;
        varying vec2 vUv;
  
        float noise(vec2 p) {
          return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);
        }
  
        void main() {
          vUv = uv;
          vec3 pos = position;
      
          // Calculate distance to mouse position
          float dist = distance(mousePosition, vec2(pos.x, pos.y));
          float effect = hovered * smoothstep(0.2, 0.0, dist) * noise(pos.xy * 10.0 + time);
      
          // Apply explode effect
          pos += normal * effect * explodeIntensity;
      
          gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);
        }
      `,

      fragmentShader: `
        varying vec2 vUv;
        uniform vec2 resolution;
        uniform vec2 mousePosition;
        uniform float time;
        uniform float hovered;
        uniform float shapeFactor;
        uniform float explodeIntensity;
  
        // Cyclic noise function with smooth oscillations
        float cyclicNoise(vec2 p) {
          float angle = sin(p.x * 5.0 + time * 0.5) + cos(p.y * 5.0 + time * 0.5);
          return fract(sin(dot(p + angle, vec2(12.9898, 78.233))) * 43758.5453);
        }
  
        // Noise function (similar to saw shader)
        float abstractNoise(vec2 p) {
          float angle = sin(p.x * 5.0 + time * 0.5) + cos(p.y * 5.0 + time * 0.5);
          return fract(sin(dot(p + angle, vec2(12.9898, 78.233))) * 43758.5453);
        }
  
        // Smoothstep interpolation function for blending
        float S(float t) {
          return t * t * (3.0 - 2.0 * t);
        }
  
        float hash(vec2 p) {
          return fract(sin(dot(p, vec2(127.1, 311.7))) * 43758.5453123);
        }
  
        float harshNoise(vec2 p) {
          vec2 i = floor(p);
          vec2 f = fract(p);
  
          vec2 u = f * f * (3.0 - 2.0 * f);
          return mix(mix(hash(i + vec2(0.0, 0.0)), hash(i + vec2(1.0, 0.0)), u.x),
                    mix(hash(i + vec2(0.0, 1.0)), hash(i + vec2(1.0, 1.0)), u.x), u.y);
        }
  
        // Smooth noise based on UV coordinates
        float noise(vec2 p) {
          vec2 i = floor(p);
          vec2 f = fract(p);
          
          float a = hash(i);
          float b = hash(i + vec2(1.0, 0.0));
          float c = hash(i + vec2(0.0, 1.0));
          float d = hash(i + vec2(1.0, 1.0));
          
          vec2 u = f * f * (3.0 - 2.0 * f);
          
          return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;
        }
  
        float opUnion(float d1, float d2) {
          return min(d2, d2);
        }
  
        float opSubtraction(float d1, float d2) {
          return max(-d1, d2);
        }
  
        float opIntersection(float d1, float d2) {
          return max(d1, d2);
        }
  
        float opSmoothUnion(float d1, float d2, float k) {
          float h = clamp(0.5 + 0.5 * (d2 - d1) / k, 0.0, 1.0);
          return mix(d2, d1, h) - k * h * (1.0 - h);
        }
  
        float opSmoothSubtraction(float d1, float d2, float k) {
          float h = clamp(0.5 - 0.5 * (d2 - d1) / k, 0.0, 1.0);
          return mix(d2, -d1, h) + k * h * (1.0 - h);
        }
  
        float opSmoothIntersection(float d1, float d2, float k) {
          float h = clamp(0.5 - 0.5 * (d2 - d1) / k, 0.0, 1.0);
          return mix(d2, -d1, h) + k * h * (1.0 - h);
        }
  
        float smin(float a, float b, float k) {
          float h = max(k - abs(a - b), 0.0) / k;
          return min(a, b) - h * h * h * k * (1.0 / 6.0);
        }
  
        float dist(vec3 p) {
          return length(p) - 1.0;
        }

        mat2 rot2D(float angle) {
          float s = sin(angle);
          float c = cos(angle);
  
          return mat2(c, -s, s, c);
        }
  
        vec3 rot3D(vec3 p, vec3 axis, float angle) {
          // Rodrigues' Rotation Formula
          return mix(dot(axis, p) * axis, p, cos(angle)) + cross(axis, p) * sin(angle);
        }
  
        float sdSphere(vec3 p, float r) {
          return length(p) - r;
        }
  
        // Create a basic box (building) SDF
        float sdBox(vec3 p, vec3 l) {
          vec3 q = abs(p) - l; 
          return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);
        }

        // Create a cuboid box (building) SDF
        float sdBuilding(vec3 p, vec3 size) {
          vec3 d = abs(p) - size;  // Get the distance from the cuboid
          return min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));
        }

        float sdGround(vec3 p) {
          return p.y + 0.75; // Ground SDF
        }

        // Signed distance function for a cone
        float sdCone(vec3 p, vec3 dir, float height, float radius) {
            // Ensure direction is normalized
            dir = normalize(dir);

            // Project point onto the cone's axis
            float d = dot(p, dir);
            vec3 projected = dir * d;

            // Compute the distance from the projected point to the actual point
            float lateralDist = length(p - projected);
            
            // Compute the expected radius at this height
            float expectedRadius = (d / height) * radius;

            // Compute the signed distance (negative inside, positive outside)
            float distance = lateralDist - expectedRadius;

            // Enforce height limits
            float capBottom = d;
            float capTop = d - height;
            
            // If above the cone's tip or below the base, clamp distance
            return max(distance, max(-capBottom, capTop));
        }

        // Bird body (simplified)
        float sdBirdBody(vec3 p, float size) {
            return sdSphere(p, size);
        }

        // Simplified Bird wings (simplified with two spheres for each wing)
        float sdWing(vec3 p, vec3 wingPos, vec3 birdPos, float wingSize, float angle) {
            // Rotate the wing around the body for animation
            // vec3 rotatedPos = rot3D(p - wingPos, vec3(0.0, 0.0, 1.0), angle) + wingPos;
            vec3 rotatedPos = rot3D(p - wingPos, birdPos, angle) + wingPos;
            return sdSphere(rotatedPos, wingSize); // Using sphere to approximate wing
        }

        // Bird head
        float sdHead(vec3 p, vec3 headPos, float headSize) {
            return sdSphere(p - headPos, headSize);
        }

        // Bird beak
        float sdBeak(vec3 p, vec3 headPos, float beakLength) {
            vec3 beakDir = normalize(p - headPos);
            return sdCone(p - headPos, beakDir, beakLength, 0.1); // A cone for the beak
        }

        // Combine the components to form a bird
        float sdBird(vec3 p, vec3 bodyPos, float bodySize, vec3 wingPos, float wingSize, vec3 headPos, float headSize, float beakLength, float wingAngle) {
            float body = sdBirdBody(p - bodyPos, bodySize);
            float wing1 = sdWing(p, wingPos, wingSize, wingAngle);
            float wing2 = sdWing(p, wingPos + vec3(0.5, 0.0, 0.0), wingSize, -wingAngle); // Second wing
            float head = sdHead(p, headPos, headSize);
            float beak = sdBeak(p, headPos, beakLength);
            // Combine parts using smooth union
            return opSmoothUnion(opSmoothUnion(body, wing1, 0.1), opSmoothUnion(wing2, opSmoothUnion(head, beak, 0.1), 0.1), 0.1);
        }

        // Main Map with birds in the scene
        float map(vec3 p) {
          // Sun
          vec3 sunPos = vec3(sin(time) * 3.0, 9.0, -90.0); // Sun Position
          float sun = sdSphere(p - sphPos, 1.0); // Sphere SDF

          // Bird position and movement based on time
          vec3 birdPos = vec3(sin(time) * 3.0, cos(time) * 3.0, time); // Bird movement
          float bodySize = 0.5;
          float wingSize = 0.2;
          float headSize = 0.2;
          float beakLength = 0.1;
          float wingAngle = sin(time * 2.0) * 0.5; // Flapping wing animation

          // Age Factor
          float ageFactor = 0.5 + 0.3 * sin(time * 2.0);  // Dynamic size variation
  
          vec3 q = p; // input copy

          // Weather Factor
          q.z += time * 0.4; // Forward Camera Movement    

          // the ommitted swizzled vec param is the axis of rotation
          // q.xz = fract(p.xz) - 0.5; // Space Repetition 0.5 is the center of repetition
          // q.y -= time * 0.4; // Upward Movement
  
          // float box = sdBox(q * 3.0, vec3(0.15)) / 3.0; 
          q = fract(p) - 0.5; // Space Repetition 0.5 is the center of repetition
          q.xz *= rot2D(time * 0.4);
          // fluid lines float box = sdBox(q * 3.0, vec3(0.15) * 3.0) / 3.0; // Scaled Cube SDF

          // Calculate building's position based on street number
          float buildingHeight = 3.0 + noise(q.xz * 0.1) * 2.0; // Random building height
          vec3 buildingPos = q - vec3(mod(q.x, grid_size), 0.0, mod(q.z, grid_size));
          float building = sdBuilding(buildingPos * 3.0, vec3(boxSize, buildingHeight, boxSize * 3.0) / 3.0) / 3.0;  // Generate a unique "houseNumber" based on the building's grid position

          // Use hash function to introduce randomness for building properties based on the houseNumber
          float houseNumber = floor(buildingPos.x / grid_size) + floor(buildingPos.z / grid_size) * 57.0;  // Unique ID for each building
          float heightFactor = hash(houseNumber + 1.0); // Random value for height variation
          float sizeFactor = hash(houseNumber + 2.0);   // Random value for size variation

          // Apply these random values to alter building height and size
          buildingHeight += heightFactor * 2.0; // Alter height based on houseNumber
          boxSize += sizeFactor * 0.5;          // Alter size based on houseNumber

          // Generate birds
          float bird = sdBird(q, birdPos, bodySize, birdPos, wingSize, birdPos + vec3(0.0, 0.5, 0.0), headSize, beakLength, wingAngle);
          
          // Smaller birds at different offsets// Young birds (light, fly higher, move faster)
          float youngHeight = mix(4.0, 2.0, ageFactor);  
          float youngVelocity = mix(2.0, 1.2, ageFactor);
          float youngBirds = sdBird(q, birdPos + vec3(2.0, youngHeight, -1.0), 
                                    bodySize * ageFactor, 
                                    birdPos, wingSize * ageFactor, 
                                    birdPos + vec3(0.0, 0.5, 0.0) * ageFactor, 
                                    headSize * ageFactor, beakLength * ageFactor, wingAngle);

          // Mature birds (medium weight, moderate altitude and speed)
          float matureHeight = mix(3.5, 1.5, ageFactor * 0.8);
          float matureVelocity = mix(1.5, 0.8, ageFactor * 0.8);
          float matureBirds = sdBird(q, birdPos + vec3(2.0, matureHeight, -1.0), 
                                    bodySize * ageFactor * 0.5, 
                                    birdPos, wingSize * ageFactor, 
                                    birdPos + vec3(0.0, 0.5, 0.0) * ageFactor, 
                                    headSize * ageFactor, beakLength * ageFactor, wingAngle);

          // Aged birds (heavier, fly lower, move slower)
          float agedHeight = mix(2.5, 1.0, ageFactor * 0.6);
          float agedVelocity = mix(1.0, 0.5, ageFactor * 0.6);
          float agedBirds = sdBird(q, birdPos + vec3(-3.0, agedHeight, 2.5), 
                                  bodySize * (ageFactor * 0.8), 
                                  birdPos, wingSize * (ageFactor * 0.8), 
                                  birdPos + vec3(0.0, 0.5, 0.0) * (ageFactor * 0.8), 
                                  headSize * (ageFactor * 0.8), beakLength * (ageFactor * 0.8), wingAngle);

          // Combine the ground with buildings
          float terrain = min(ground, building); 
          float terrainBirds = opSmoothIntersection(terrain, min(bird, flock), min(bird, terrain)); 
  
          // To combine the two shapes using the union operator
          //return smin(sphere, box, 2.0); // The additional param is for the blending
          // return smin(ground, box, 2.0); // The additional param is for the blending
          // return opSmoothIntersection(ground, smin(box, sun, min(box, sun)), 2.0); /// Returned image
          return opSmoothUnion(terrain, opSmoothUnion(building, terrainBirds, opSmoothUnion(bird, flock, terrainBirds)), min(flock, terrain));
        }

        vec3 computeNormal(vec3 p) {
          float epsilon = 0.001;
          return normalize(vec3(
              map(p + vec3(epsilon, 0, 0)) - map(p - vec3(epsilon, 0, 0)),
              map(p + vec3(0, epsilon, 0)) - map(p - vec3(0, epsilon, 0)),
              map(p + vec3(0, 0, epsilon)) - map(p - vec3(0, 0, epsilon))
          ));
        }

        // Function to compute soft shadows
        float computeSoftShadow(vec3 p, vec3 lightPos) {
          vec3 shadowDir = normalize(lightPos - p);
          float shadowT = 0.1; // Small initial offset to avoid self-shadowing
          float shadowFactor = 1.0;
          float maxDist = 5.0;

          for (int j = 0; j < 24; j++) { // Optimized loop count
            vec3 shadowPoint = p + shadowDir * shadowT;
            float shadowDist = map(shadowPoint);
                
            if (shadowDist < 0.001) {
              shadowFactor *= 0.5; // Reduce intensity for occlusion
            }
                
            shadowT += shadowDist * 0.5; // Smaller steps improve softness
            if (shadowT > maxDist) break; // Stop marching if too far
          }

          return clamp(shadowFactor, 0.2, 1.0); // Ensure valid shadow range
        }
      
        vec3 computeCameraPosition(float time) {
          float radius = 5.0; // Adjust for larger or smaller movement
          float speed = 0.5; // Adjust rotation speed
      
          float camX = radius * cos(time * speed);
          float camZ = radius * sin(time * speed);
          
          return vec3(camX, 1.5, camZ - 3.0); // Y-position can be adjusted for height
        }

        vec3 applyFog(vec3 color, float distance, vec3 fogColor, float fogDensity) {
          float fogFactor = exp(-distance * fogDensity); // Exponential fog
          return mix(fogColor, color, fogFactor); // Blend fog with scene color
        }

        void wiggleCamera(inout vec3 ro, inout vec3 rd, vec2 uv, vec2 mouse, float time) {
          // Adding wiggle effect to the camera
          ro.x += sin(time * 2.0) * 0.5;
          ro.y += cos(time * 1.5) * 0.2;
          
          // Slight noise-based distortion on ray direction
          rd += normalize(vec3(
              sin(uv.x * time * 0.5) * 0.1,  
              cos(uv.y * time * 0.3) * 0.1,  
              sin(uv.x * time * 0.7) * 0.1  
          ));

          rd = normalize(rd); // Normalize direction after adding noise

          // Camera rotations
          ro.xz *= rot2D(-mouse.x);
          rd.xz *= rot2D(-mouse.x);
      
          ro.yz *= rot2D(-mouse.y);
          rd.yz *= rot2D(-mouse.y);
        }
        
        // Main fragment shader function
        void main() {
            vec2 fragCoord = gl_FragCoord.xy;
            vec2 uv = fragCoord / resolution; // Proper UV mapping
            vec2 mouse = (mousePosition.xy * 2.0 - fragCoord) / resolution.y;

            // Noise and Soft Min calculations
            float n = noise(uv * sin(shapeFactor + uv.x) + sin(uv * sin(shapeFactor + uv.x)));
            float smn = smin(uv.x + time, uv.y + shapeFactor, shapeFactor + sin(uv.x * shapeFactor));
            float shadowIntensity = 0.1;
        
            // UV Transformations
            uv *= 2.0 + time;
        
            float fov = 1.0;
            vec3 ro = vec3(0, 0, -3); // Ray Origin
            vec3 rd = normalize(vec3(uv * fov, 1)); // Ray Direction
        
            uv *= 1.2 + noise(uv * time) * 0.05;  // Slight noise-based distortion

            // Shadow and Reflections
            vec3 lightPos = vec3(0.0, 10.0, -5.0); // Light position
            vec3 viewDir = normalize(vec3(0.0, 0.0, 1.0)); // Camera view direction
            vec3 lightDir;

            // Apply wiggle effect to the camera
            wiggleCamera(ro, rd, uv, mouse, time);
        
            // 🔥🔥 Ray Marching Algorithm
            float depthFactor = 0.064;
            float lightIntensity = 0.02;
            float t = 0.0; // Total Distance Travelled By Ray
            vec3 normal; // Declare normal
            //vec3 color = vec3(t);
            vec3 color = vec3(t * time * 0.2 * depthFactor + noise(uv.xy * 3.0 + time * 0.5));
        
            // Ray Marching Algorithm
            for (int i = 0; i < 80; i++) {
                vec3 p = ro + rd * t; // Position along the ray
                float d = map(p); // Current distance to the scene
                lightDir = normalize(lightPos - p);
                    
                // Compute Shadows and reflections
                if (d < 0.001) {  
                  normal = computeNormal(p); // ✅ Compute surface normal here vec3 p, vec3 lightPos
                  float shadow = computeSoftShadow(p + normal * 0.02, lightPos);
                  //float light = computeLighting(p, normal, lightPos, viewDir, shadow);
                  shadowIntensity = computeSoftShadow(p, lightPos); // Call function
                  // shadowIntensity = computeSoftShadow(p, lightPos); // Compute soft shadow
                  // shadowIntensity = computeHardShadow(p, lightPos); // Call function
                  // color *= shadowIntensity; // Apply shadow effect
                  break;
        
                t += d; // March the distance
        
                color = vec3(i) / 80.0;
        
                if (d < 0.001 || t > 100.0) break;
            
            }
            // Apply depth factor
            float rayPower = t * 0.003 * lightIntensity * depthFactor * shadowIntensity;
  
            // Define fog parameters
            vec3 fog = vec3(0.2, 0.3, 0.4); // Adjust for desired atmosphere
            float fogDensity = 0.02; // Adjust for stronger/weaker fog
  
            // Final Coloring with Shadows
            float rgR = rayPower + S(noise(uv.xy * 4.0 + time * 0.3)) + shadowIntensity;
            float rgG = rayPower + S(noise(uv.yx * 3.0 + time * 0.5)) + shadowIntensity;
            float rgB = rayPower + S(noise(uv.xy * 2.0 + time * 0.7)) + shadowIntensity;
            
            color = vec3(rgR, rgG, rgB);
  
            color = applyFog(color, t, fog, fogDensity);
            //color = mix(color, fog, 1.0 - exp(-fogDensity * t));
  
          
            gl_FragColor = vec4(color, 1);
          }
        }        
      `
    };

    this.wiredCityTerrainSDFMaterial = new THREE.ShaderMaterial(this.wiredCityTerrainSDFShader);    
  }  